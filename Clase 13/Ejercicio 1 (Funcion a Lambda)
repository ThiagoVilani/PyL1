from random import randint
from functools import reduce
from random import shuffle

lista_palabras = [
    "Goku", "Vegeta", "Frieza", "Cell", "Beerus", 'Krillin'
]


# Refactoprizar la funcion clasica usando lambda
#def sup_triangulo(base: int, altura: int) -> float:
#    return (base*altura)/2
#---------------------------------
#Usando Lambda
sup_triangulo = lambda base, altura : base * altura
print(sup_triangulo(2, 5))
#:::::::::::::::::::::::::::::::::::::::::::::::


# Refactorizar la funcion clasica usando lambda y map
#def aplicar_mayusculas(lista_palabras: list) -> list:
#    for i in range(len(lista_palabras)):
#        lista_palabras[i] = lista_palabras[i].upper()
#    return lista_palabras
#----------------------------------
#Usando Lambda
aplicar_mayusculas = list(map(str.upper, lista_palabras))
print(aplicar_mayusculas)
#:::::::::::::::::::::::::::::::::::::::::::::::


## Refactorizar la funcion usando lambda y reduce
#def obtener_mas_letras(lista: list) -> str:
#    seleccionado = ''
#    for palabra in lista:
#        if len(palabra) > len(seleccionado):
#            seleccionado = palabra
#    return seleccionado
#----------------------------
#USANDO LAMBDA Y REDUCE
obtener_mas_letras = reduce(lambda palabra_grande, palabra : palabra if len(palabra_grande) < len(palabra) else palabra_grande, lista_palabras) 
print(obtener_mas_letras)
#:::::::::::::::::::::::::::::::::::::::::::::::


## refactorizar la funcion usando lambda y filter
#def obtener_nombres_cantidad_letras(lista: list, cantidad: int) -> list:
#    seleccionados = list()
#    for palabra in lista:
#        if len(palabra) == cantidad:
#            seleccionados.insert(0, palabra)
#    return seleccionados
#--------------------------
#USANDO LAMBDA Y FILTER

cantidad = 4
obtener_nombres_cantidad_letras = list(filter(lambda palabra : len(palabra) == cantidad, lista_palabras))
print(obtener_nombres_cantidad_letras)
#:::::::::::::::::::::::::::::::::::::::::::::::



## refactorizar usando shuffle
#def ordenar_random_lista(lista: list) -> list:
#    maximo = len(lista)
#    desordenada = list()
#    while len(desordenada) < len(lista):
#        indice = randint(0, maximo)
#        for elemento in lista:
#            desordenada.insert(indice, elemento)
#    return desordenada
#-----------------------------
#USANDO SHUFFLE
shuffle(lista_palabras)
print(lista_palabras, "desorden")
#:::::::::::::::::::::::::::::::::::::::::::::::



## Refactorizar usando sort y lamda
#def ordenar_burbujeo(lista: list) -> list:
#    lista_copia = lista.copy()
#    for i in range(len(lista_copia)-1):
#        for j in range(i+1, len(lista_copia)):
#            if lista_copia[i] > lista_copia[j]:
#                lista_copia[i], lista_copia[j] = lista_copia[j], lista_copia[i]
#    return lista_copia
#--------------------
#USANDO SORT Y LAMBDA
lista_palabras.sort()
print(lista_palabras)
#:::::::::::::::::::::::::::::::::::::::::::::::


heroes = [
    "goKU", "vEgETa", 'kriLLin'
]

villanos = [
    "FrIEzA", "CELl", "Majin Buu"
]

ataques = [
    "Kame hame ha", "Final flash", "Kienzan"
]
#
## Refactorizar usando zip
#for ind_h in range(len(heroes)):
#    for ind_a in range(ind_h, len(ataques)):
#        for ind_v in range(ind_h, len(villanos)):
#            mensaje =\
#                f"""
#                {heroes[ind_h].capitalize()}
#                Lanza un {ataques[ind_a].capitalize()}
#                a {villanos[ind_v].capitalize()}
#                """
#            print(mensaje)
#            break
#        break
#-------------------------------
#USANDO ZIP
for heroe, villano, ataque in zip(heroes, villanos, ataques):
    print("\n{0} Lanza un {1} a {2}".format(heroe.capitalize(), ataque.capitalize(), villano.capitalize()))
#:::::::::::::::::::::::::::::::::::::::::::::::
